/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/options {
                 
                   
                             
}

PARSER_BEGIN(Parser)

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/
    public static void main (String[] args) throws ParseException{
        Parser parser = new Parser(System.in);
        try{
            ASTBlock n = parser.BLOCK();
            ParserVisitor v = new ParserDumpVisitor();
            n.jjtAccept(v, null);
            //n.dump("");
            System.out.println("Successfully Parsed");
        } catch (Exception e) {
            System.out.println("Something went wrong....");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Parser)

SKIP :
{
    " "
|   "\n"
|   "\t"
|   "\r"
}


TOKEN :
{
    <INT : "int">
|   <BOOL : "bool">
|   <ID : (["A"-"Z","a"-"z"])+>
|	<LPAR : "{">
|	<RPAR : "}">
|   <LBRAC : "(">
|   <RBRAC : ")">
|	<PLUS : "+">
|	<MINUS : "-">
|	<MULTI : "*">
|   <NUM : (["0"-"9"])+>
|	<EQU : "=">
|   <GRTN : ">">
|   <LSTN : "<">
|   <IF : "->">
|   <ELSE : ":">
|   <SEMIC : ";">
|   <COMMA : ",">
|   <ASSIGN : ":=">
}

/** Non-Terminals **/
ASTBlock BLOCK()        : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    <LPAR> DECLSET() STMTSET() <RPAR> <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DECLSET() : {}
{
    DECL() DECLSET_()
}

void DECLSET_() : {}
{
    DECL() DECLSET_()
|   { }
}

void DECL() : {}
{
    <INT> VARS() <SEMIC>
|   <BOOL> VARS() <SEMIC>
}

void VARS() : {}
{
    <ID> VARS_()
}

void VARS_() : {}
{
    VARS__() VARS_()
|   { }
}

void VARS__() : {}
{
    <COMMA> <ID>
}

void STMTSET() : {}
{
    STMT() STMTSET_()
}

void STMTSET_() : {}
{
    <SEMIC> STMT() STMTSET_()
|   { }
}

void STMT() : {}
{
    ASSN()
}

void ASSN()        : {/*@bgen(jjtree) IDAssn */
  ASTIDAssn jjtn000 = new ASTIDAssn(JJTIDASSN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IDAssn */
    try {
/*@egen*/
    <ID> ASSN_()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ASSN_() : {}
{
    <ASSIGN> FACTOR() ASSN__()
}

void ASSN__() : {}
{
    ARITH() ASSN___()
}

void ASSN___() : {}
{
    COMP() COND()
|   { }
}

void ARITH() : {}
{
    <PLUS> ARITH_()
|   <MINUS> ARITH_()
|   { }
}

void ARITH_() : {}
{
    TERM() ARITH()
}
void TERM() : {}
{
    FACTOR() TERM_()
}

void TERM_() : {}
{
    <MULTI> ARITH_()
|   { }
}

void FACTOR() : {}
{
    <ID>
|   <NUM>
|   <LBRAC> ARITH_() <RBRAC>
}

void COMP() : {}
{
    <EQU> ARITH_()
|   <GRTN> ARITH_()
|   <LSTN> ARITH_()
}

void COND() : {}
{
    <IF> ARITH_() COND_()
|   { }
}

void COND_() : {}
{
    <ELSE> ARITH_()
}